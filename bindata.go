// Code generated by go-bindata.
// sources:
// attrs.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _attrsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x97\xdf\x6f\xdb\x36\x10\xc7\xdf\xfd\x57\x1c\xba\x97\x0e\xb0\x53\xff\xe8\xb6\xda\x2f\x45\x81\xec\x47\x81\x61\xdb\xc3\xb0\x61\x08\x02\x83\x16\xcf\x12\x63\x89\x14\x48\x4a\xb1\x53\xf4\x7f\x1f\x29\x99\x34\x25\x4b\x91\x8d\xc2\x41\x8c\x7c\x75\x77\xe4\x87\x47\x1d\x8f\xce\x64\x32\x19\x4d\x46\x00\xff\x0a\xb9\x43\xb9\x02\xdc\xeb\xf5\x73\xa5\x8d\xf1\x3f\x54\x2b\x60\x19\x89\x71\xbd\x65\x29\x1a\xcb\x27\xb5\x5b\xc1\x67\x05\x3a\x61\x0a\x08\xaf\x9d\x1f\x8d\xe3\xb3\xc6\x4c\xad\x8c\x00\x98\xc0\x9d\x66\xdb\x40\x7a\x1d\x9f\xcc\x4f\x39\xc6\x27\xed\x25\x47\x1f\x91\x73\x6f\xcd\x15\x75\x72\x93\xe5\x03\xeb\xcd\x13\xa1\x85\x4a\x44\xde\xb7\xe6\xbf\x5c\x40\xdf\xea\x2d\x6e\x62\xf5\xab\x9c\x92\x51\x14\xdd\x8c\xda\x07\xd6\x77\x9a\x1d\xdc\xf4\xa4\x64\x4e\x66\xbb\xd2\xcb\xfc\xbd\x93\xcf\x59\x39\x90\x23\x29\x28\x3b\x63\x33\x6d\xb3\xab\x5c\xf0\x4b\x03\x7d\x62\x2c\xbc\x5c\x14\x03\x0c\xca\xd4\x6e\x9d\x89\x82\x6b\xc6\xe3\x2e\x56\x15\x01\x2e\xa2\x95\xad\xe3\xd0\x2c\x06\x38\xee\x65\x65\x60\x4a\x0c\x81\x45\x54\x64\xc8\xf5\x19\xee\x68\xef\x28\xb7\xbd\xf6\x3c\x11\x05\x72\xef\x74\xa2\xb3\xd4\x69\xa9\x7d\x8d\x09\xea\x07\xe6\xd4\x5b\xe9\x53\x59\x38\xbd\x4f\x55\x20\xf7\x03\x98\x3c\xd7\x81\xdc\x0f\x24\x2a\xb6\x5b\x16\xe1\xba\x27\x5f\x0e\x7f\x56\x7e\xb8\xef\xcd\xfb\x96\x8b\xcb\x25\x2a\x03\x25\x9a\x09\xde\x7e\x13\xa1\xaf\xe3\xf8\x5c\xc5\x51\x66\x32\x42\x55\x82\x78\xbe\x01\x81\x6f\x38\xf9\xd7\x31\xe6\x89\xda\x9d\x56\xed\x5c\xac\xc3\x96\x96\xea\xa8\xdd\xd6\x3e\xf6\xf7\x04\x70\x18\x2d\xa4\xec\x28\xdd\xa3\xb9\xe7\x8c\xb8\x41\x17\xcc\xbf\x11\x62\xd7\x9e\xdc\xda\x3a\xde\x42\x77\x3d\x6f\x37\x73\x27\x31\x2f\x36\xbe\x1d\x10\xd3\xa5\xbb\x77\xd0\xb3\x89\x8c\x12\x56\x76\x74\x9c\xda\xde\x91\x17\x91\x81\xbc\x8b\x5f\xfc\x3d\xe0\x95\x3c\x85\xbc\xb0\xdc\x37\xf9\x97\x70\x9c\x79\x1a\x58\x59\x2e\x45\x2c\x49\x96\xb1\xea\xca\x08\x56\x17\x38\x20\x25\x3c\x2e\x4c\xbf\xef\x7a\x09\xd5\x52\x36\x5e\x46\xe9\x53\xa8\x95\x7f\xc8\x0f\x5e\xaa\xe4\x14\x22\xf8\xd6\x3f\xc4\xc2\xcb\x27\x55\x1d\x9d\x63\x50\x30\x49\xa8\x07\xcf\xe1\x41\x27\xed\x13\x58\xdb\x3a\xde\xf9\x61\xd4\x62\x5c\x84\xb0\xeb\x67\x71\xbb\xac\x6a\x6b\x4f\xc9\xfa\x94\x5d\x9a\x21\x41\xb1\x17\x5c\x4b\xb3\xdd\xd8\x3e\xeb\x19\x49\xd3\xce\x2b\xd3\xda\x6a\xf7\xdb\x14\x95\x35\x9a\xc2\x9a\x4d\xa7\x90\x61\x4c\x36\x07\x8d\xea\xfb\xe0\x26\x85\x87\xe9\x78\xb9\x7c\xbc\x0c\xba\x61\x67\xb7\xd7\x09\x69\x9c\x8d\x79\x0d\x72\x6c\x3e\xe6\xa7\x39\x3b\x25\xba\x3d\xaf\xe0\xc6\x82\xb8\x6b\x4c\x7e\xcf\x28\x1c\x44\x01\x31\xea\x80\xc2\x4c\x2b\xc3\x12\xb9\x99\xe6\xa0\x1a\xbc\xf9\x0f\xe3\xd9\x8f\xcb\x41\xd6\x01\x95\x46\x69\x46\x5f\x00\xf3\xb1\xcd\xc4\xc6\xf3\xc5\x45\x29\x25\xa2\x90\xbd\x14\xf3\x57\xd6\x14\x13\x0a\xf6\x81\xc4\xa2\xf5\x62\xe6\x4d\x4c\x4e\x74\xb2\x56\xc5\x46\x69\x69\xbf\x47\xb4\xaf\xfa\x67\x9e\x0a\x42\x91\xb6\x69\xce\x63\x6b\x71\x2b\x45\x66\x12\xb4\xfb\x68\x32\xe3\xe1\x65\x00\x0f\xf7\xc7\x40\x35\x76\xea\x0a\x3e\xc9\x49\x94\xe0\xbc\x59\xfa\x9f\x2a\x23\x48\x4c\xcd\x0e\xd1\x90\xf5\x0e\x75\xf4\xae\x1e\x73\x05\x84\xc7\x8c\xef\x9b\x88\x3f\xac\xa9\x97\x50\x0d\xb8\x02\x50\x26\x42\xe9\xea\x9d\xa9\x76\x91\x13\xf8\x87\x49\x5d\x90\xf4\x37\x13\xd2\xfe\x42\xfa\xa0\x98\x39\x58\x13\xe4\x64\x93\x22\x1d\x43\xfd\x48\x4a\xc2\x52\x6b\xb9\x26\x45\xd4\xd6\xb0\x66\x7c\x2b\xda\x4b\x38\xfa\x6c\x0b\xee\x4d\xb8\x0e\xb9\x02\x98\x30\x4a\xb1\xd5\x15\x6b\xdb\x18\xee\x0a\xfe\x4c\x4c\xa5\xd0\xb3\x7c\xbd\xe7\x71\xf4\x1d\x4c\xcc\xe7\x44\x63\x74\xb1\xb6\xff\xe7\x54\x1d\xa4\xf2\xfc\x2e\x22\x92\xe2\xaa\xd2\x00\x3f\xf3\xe0\xc6\x13\x29\x85\xac\x50\x2c\x02\x2d\x49\xb4\x83\xb7\xc6\x60\xae\xa3\xaa\x69\x7d\xf9\xa2\x49\xfc\xf5\xeb\xc7\x6a\x9c\x03\xcf\x96\xb6\xaf\x2c\xed\x49\xff\x06\xf0\x91\x29\xb6\x7d\x90\x9f\x2c\xe4\xc3\x8d\x21\x4b\x73\xc4\xa7\xd3\x9b\x42\xe6\xd3\x99\x85\xcc\x66\x37\x86\xcc\x2d\x64\x71\x63\xc8\x7b\x0b\xf9\xd0\x0d\x51\x9a\x70\x4a\xa4\x5e\x9b\xa1\x3d\x9c\xbf\xed\x19\xaa\x21\x31\x72\x69\x9a\xa0\xea\x46\xbd\xf9\xd5\xba\xdf\x3c\x9a\x7a\x1f\xb9\x4f\xdf\xef\xff\x01\x00\x00\xff\xff\x2d\x2c\x77\x1c\xf6\x0f\x00\x00")

func attrsYamlBytes() ([]byte, error) {
	return bindataRead(
		_attrsYaml,
		"attrs.yaml",
	)
}

func attrsYaml() (*asset, error) {
	bytes, err := attrsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "attrs.yaml", size: 4086, mode: os.FileMode(420), modTime: time.Unix(1453205445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"attrs.yaml": attrsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"attrs.yaml": &bintree{attrsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

